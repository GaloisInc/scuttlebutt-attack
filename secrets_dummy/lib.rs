#![no_std]

#[path = "../src/comm_trace_types.rs"] pub mod comm_trace_types;
use crate::comm_trace_types::{Event, EventKind, Channel, Thread};
use crate::comm_trace_types::{NUM_EVENTS, NUM_CHANNELS, NUM_THREADS, NUM_DATA_BYTES};

#[no_mangle]
#[link_section = ".rodata.secret.ssb_events"]
pub static CC_SSB_EVENTS: [Event; NUM_EVENTS] = [
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
  Event { thread_id: 0, channel_id: 0, kind: EventKind::Recv, range: 0 .. 0, next_event_for_thread: 0 },
];

#[no_mangle]
#[link_section = ".rodata.secret.ssb_num_valid_events"]
pub static CC_SSB_NUM_VALID_EVENTS: usize = 0;

#[no_mangle]
#[link_section = ".rodata.secret.ssb_channels"]
pub static CC_SSB_CHANNELS: [Channel; NUM_CHANNELS] = [
  Channel { start: 0 },
  Channel { start: 0 },
];

#[no_mangle]
#[link_section = ".rodata.secret.ssb_threads"]
pub static CC_SSB_THREADS: [Thread; NUM_THREADS] = [
  Thread { first_event: 0 },
  Thread { first_event: 0 },
];

#[no_mangle]
#[link_section = ".rodata.secret.ssb_data"]
pub static CC_SSB_DATA: [u8; NUM_DATA_BYTES] = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];
